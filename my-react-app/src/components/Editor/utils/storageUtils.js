// LocalStorage Êìç‰ΩúÂ∑•ÂÖ∑

import { generate3DSnapshot } from './snapshot3D';
import { API } from '../../../services/api';

const STORAGE_KEYS = {
  UPLOADED_IMAGES: 'editor_uploaded_images',
  DRAFT_PREFIX: 'draft_',
  IMAGE_LIBRARY: 'editor_image_library_', // ÂúñÁâáÂ∫´ÂâçÁ∂¥
};

// Â∞áÂúñÁâá URL ÂÑ≤Â≠òÂà∞ÂúñÁâáÂ∫´‰∏¶ËøîÂõû ID
const saveImageToLibrary = (imageUrl) => {
  try {
    // ‰ΩøÁî®ÂÖßÂÆπÁöÑÁ∞°ÂñÆ hash ‰ΩúÁÇ∫ IDÔºàÈÅøÂÖçÈáçË§áÂÑ≤Â≠òÁõ∏ÂêåÂúñÁâáÔºâ
    const simpleHash = imageUrl.substring(0, 100).replace(/[^a-zA-Z0-9]/g, '').substring(0, 30);
    const imageId = `img_${simpleHash}_${Date.now()}`;
    const imageKey = `${STORAGE_KEYS.IMAGE_LIBRARY}${imageId}`;

    // Ê™¢Êü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÂÖßÂÆπÁöÑÂúñÁâáÔºàÂü∫Êñº hashÔºâ
    const existingKey = findExistingImageByHash(simpleHash);
    if (existingKey) {
      console.log('‰ΩøÁî®Â∑≤Â≠òÂú®ÁöÑÂúñÁâáÂºïÁî®:', existingKey);
      return existingKey.replace(STORAGE_KEYS.IMAGE_LIBRARY, '');
    }

    // ÂÑ≤Â≠òÊñ∞ÂúñÁâá
    localStorage.setItem(imageKey, imageUrl);
    return imageId;
  } catch (error) {
    console.error('ÂÑ≤Â≠òÂúñÁâáÂà∞ÂúñÁâáÂ∫´Â§±Êïó:', error);

    // Â¶ÇÊûúÊòØÂÆπÈáèÈåØË™§ÔºåÂòóË©¶Ê∏ÖÁêÜÊú™‰ΩøÁî®ÁöÑÂúñÁâá
    if (error.name === 'QuotaExceededError' || error.code === 22 || error.code === 1014) {
      console.warn('ÂÑ≤Â≠òÁ©∫Èñì‰∏çË∂≥ÔºåÂª∫Ë≠∞Ê∏ÖÁêÜËàäËçâÁ®øÊàñÊú™‰ΩøÁî®ÁöÑÂúñÁâá');
    }

    return null;
  }
};

// Â∞ãÊâæÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÁöÑÂúñÁâáÔºàÂü∫Êñº hashÔºâ
const findExistingImageByHash = (hash) => {
  for (let key in localStorage) {
    if (key.startsWith(STORAGE_KEYS.IMAGE_LIBRARY) && key.includes(hash)) {
      return key;
    }
  }
  return null;
};

// ÂæûÂúñÁâáÂ∫´Áç≤ÂèñÂúñÁâá URL
const getImageFromLibrary = (imageId) => {
  try {
    const imageKey = `${STORAGE_KEYS.IMAGE_LIBRARY}${imageId}`;
    return localStorage.getItem(imageKey);
  } catch (error) {
    console.error('ÂæûÂúñÁâáÂ∫´Áç≤ÂèñÂúñÁâáÂ§±Êïó:', error);
    return null;
  }
};

// ÂÑ™ÂåñÂÖÉÁ¥†ÂÑ≤Â≠òÔºöÂ∞áÂúñÁâá URL ÊõøÊèõÁÇ∫ÂºïÁî® ID
const optimizeElementsForStorage = (elements) => {
  return elements.map(element => {
    if (element.type === 'image' && element.url && element.url.startsWith('data:')) {
      // Â¶ÇÊûúÊòØ base64 ÂúñÁâáÔºåÂÑ≤Â≠òÂà∞ÂúñÁâáÂ∫´‰∏¶ÊõøÊèõÁÇ∫ ID
      const imageId = saveImageToLibrary(element.url);
      if (imageId) {
        return {
          ...element,
          url: `ref:${imageId}`, // ‰ΩøÁî®ÂºïÁî®Ê®ôË®ò
          _originalUrl: undefined, // ÁßªÈô§ÂéüÂßã URL
        };
      } else {
        // Â¶ÇÊûúÂÑ≤Â≠òÂ§±ÊïóÔºå‰øùÁïôÂéüÂßã URL
        console.warn('ÂúñÁâáÂÑ≤Â≠òÂà∞ÂúñÁâáÂ∫´Â§±ÊïóÔºå‰øùÁïôÂéüÂßã URL');
        return element;
      }
    }
    return element;
  });
};

// ÈÇÑÂéüÂÖÉÁ¥†ÔºöÂ∞áÂºïÁî® ID ÊõøÊèõÂõûÂúñÁâá URL
const restoreElementsFromStorage = (elements) => {
  return elements.map(element => {
    if (element.type === 'image' && element.url && element.url.startsWith('ref:')) {
      // Â¶ÇÊûúÊòØÂºïÁî® IDÔºåÂæûÂúñÁâáÂ∫´Áç≤ÂèñÂØ¶Èöõ URL
      const imageId = element.url.replace('ref:', '');
      const imageUrl = getImageFromLibrary(imageId);
      if (imageUrl) {
        return {
          ...element,
          url: imageUrl,
        };
      }
    }
    return element;
  });
};

// ÂÑ≤Â≠òËçâÁ®ø
export const saveDraft = async (productId, designData, draftId = null, product = null) => {
  const { elements, backgroundColor, workName } = designData;

  // ÂÑ™ÂåñÂÖÉÁ¥†ÂÑ≤Â≠ò
  const optimizedElements = optimizeElementsForStorage(elements);

  const draft = {
    productId,
    timestamp: new Date().toISOString(),
    elements: optimizedElements,
    backgroundColor,
    name: workName,
  };

  // Â¶ÇÊûúÊòØ 3D ÂïÜÂìÅÔºåÁîüÊàêÂø´ÁÖß‰∏¶‰∏äÂÇ≥Âà∞‰º∫ÊúçÂô®
  const glbUrl = product?.glbUrl || product?.model3D?.glbUrl;
  console.log('üîç Ê™¢Êü•ÂïÜÂìÅÈ°ûÂûã:', product?.type, 'ÊòØÂê¶Êúâ GLB:', !!glbUrl);
  if (product && product.type === '3D' && glbUrl) {
    console.log('üé® Ê≠£Âú®ÁîüÊàê 3D È†êË¶ΩÂø´ÁÖß...', {
      productId: product.id,
      productTitle: product.title,
      elementsCount: elements.length
    });
    try {
      const snapshot = await generate3DSnapshot(
        product,
        elements, // ‰ΩøÁî®ÂéüÂßãÂÖÉÁ¥†Ôºå‰∏çÊòØÂÑ™ÂåñÂæåÁöÑ
        backgroundColor,
        400,
        400
      );
      if (snapshot) {
        console.log('‚úÖ 3D Âø´ÁÖßÂ∑≤ÁîüÊàêÔºåÂ§ßÂ∞è:', (snapshot.length / 1024).toFixed(2), 'KB');

        // ‰∏äÂÇ≥Âø´ÁÖßÂà∞‰º∫ÊúçÂô®
        try {
          const uploadResult = await API.upload.snapshot(snapshot, productId);
          draft.snapshot3D = uploadResult.url; // ÂÑ≤Â≠ò URL ËÄåÈùû base64
          console.log('‚úÖ Âø´ÁÖßÂ∑≤‰∏äÂÇ≥Âà∞‰º∫ÊúçÂô®:', uploadResult.url, 'Ê™îÊ°àÂ§ßÂ∞è:', uploadResult.sizeKB, 'KB');
        } catch (uploadError) {
          console.error('‚ùå ‰∏äÂÇ≥Âø´ÁÖßÂ§±ÊïóÔºå‰ΩøÁî® base64 ÂÑ≤Â≠ò:', uploadError);
          draft.snapshot3D = snapshot; // Â§±ÊïóÊôÇÂõûÈÄÄÂà∞ base64
        }
      } else {
        console.warn('‚ö†Ô∏è ÁîüÊàêÁöÑÂø´ÁÖßÁÇ∫ null');
      }
    } catch (error) {
      console.error('‚ùå ÁîüÊàê 3D Âø´ÁÖßÂ§±ÊïóÔºå‰ΩÜËçâÁ®ø‰ªçÊúÉÂÑ≤Â≠ò:', error);
    }
  } else {
    console.log('‚è≠Ô∏è Ë∑≥ÈÅé 3D Âø´ÁÖßÁîüÊàêÔºàÈùû 3D ÂïÜÂìÅÊàñÁº∫Â∞ë GLBÔºâ');
  }

  try {
    const draftString = JSON.stringify(draft);

    // Ê™¢Êü•ËçâÁ®øÂ§ßÂ∞èÔºà‰ª• KB ÁÇ∫ÂñÆ‰ΩçÔºâ
    const draftSizeKB = new Blob([draftString]).size / 1024;
    console.log(`ÂÑ™ÂåñÂæåËçâÁ®øÂ§ßÂ∞è: ${draftSizeKB.toFixed(2)} KB`);

    // Â¶ÇÊûúËçâÁ®øË∂ÖÈÅé 4MBÔºåË≠¶ÂëäÁî®Êà∂
    if (draftSizeKB > 4096) {
      console.warn('ËçâÁ®øÂ§ßÂ∞èË∂ÖÈÅé 4MBÔºåÂèØËÉΩÊúÉÂ∞éËá¥ÂÑ≤Â≠òÂ§±Êïó');
      return {
        success: false,
        message: 'ËçâÁ®øÈÅéÂ§ßÔºàË∂ÖÈÅé4MBÔºâÔºåË´ãÊ∏õÂ∞ëÂúñÁâáÂÖÉÁ¥†ÊàñÈôç‰ΩéÂúñÁâáÂìÅË≥™',
        draftId: null
      };
    }

    if (draftId) {
      // Êõ¥Êñ∞ÁèæÊúâËçâÁ®ø
      localStorage.setItem(draftId, draftString);
      return { success: true, message: 'ËçâÁ®øÂ∑≤Êõ¥Êñ∞ÔºÅ', draftId };
    } else {
      // ÂâµÂª∫Êñ∞ËçâÁ®ø
      const newDraftId = `${STORAGE_KEYS.DRAFT_PREFIX}${productId}_${Date.now()}`;
      localStorage.setItem(newDraftId, draftString);
      return { success: true, message: 'ËçâÁ®øÂ∑≤ÂÑ≤Â≠òÔºÅ', draftId: newDraftId };
    }
  } catch (error) {
    console.error('ÂÑ≤Â≠òËçâÁ®øÂ§±Êïó:', error);

    // Ê™¢Êü•ÊòØÂê¶ÊòØÂÆπÈáèÈôêÂà∂ÈåØË™§
    if (error.name === 'QuotaExceededError' ||
        error.code === 22 ||
        error.code === 1014) {
      return {
        success: false,
        message: 'ÂÑ≤Â≠òÁ©∫Èñì‰∏çË∂≥ÔºÅË´ãÂà™Èô§ËàäËçâÁ®øÊàñÊ∏õÂ∞ëÂúñÁâáÊï∏Èáè',
        draftId: null
      };
    }

    return { success: false, message: `ÂÑ≤Â≠òÂ§±Êïó: ${error.message}`, draftId: null };
  }
};

// ËºâÂÖ•ËçâÁ®ø
export const loadDraft = (draftId) => {
  try {
    const draftData = localStorage.getItem(draftId);
    if (draftData) {
      const draft = JSON.parse(draftData);

      // ÈÇÑÂéüÂúñÁâáÂºïÁî®
      if (draft.elements) {
        draft.elements = restoreElementsFromStorage(draft.elements);
      }

      return draft;
    }
    return null;
  } catch (error) {
    console.error('ËºâÂÖ•ËçâÁ®øÂ§±Êïó:', error);
    return null;
  }
};

// Âà™Èô§ËçâÁ®ø
export const deleteDraft = (draftId) => {
  try {
    localStorage.removeItem(draftId);
    return true;
  } catch (error) {
    console.error('Âà™Èô§ËçâÁ®øÂ§±Êïó:', error);
    return false;
  }
};

// Áç≤ÂèñÊâÄÊúâËçâÁ®ø
export const getAllDrafts = () => {
  const drafts = [];
  try {
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith(STORAGE_KEYS.DRAFT_PREFIX)) {
        const draftData = localStorage.getItem(key);
        if (draftData) {
          drafts.push({
            id: key,
            ...JSON.parse(draftData),
          });
        }
      }
    }
    // ÊåâÊôÇÈñìÊà≥ÊéíÂ∫èÔºåÊúÄÊñ∞ÁöÑÂú®Ââç
    return drafts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  } catch (error) {
    console.error('Áç≤ÂèñËçâÁ®øÂàóË°®Â§±Êïó:', error);
    return [];
  }
};

// ÂÑ≤Â≠òÂ∑≤‰∏äÂÇ≥ÁöÑÂúñÁâá
export const saveUploadedImages = (images) => {
  try {
    localStorage.setItem(STORAGE_KEYS.UPLOADED_IMAGES, JSON.stringify(images));
    return true;
  } catch (error) {
    console.error('ÂÑ≤Â≠òÂúñÁâáÂ§±Êïó:', error);
    return false;
  }
};

// ËºâÂÖ•Â∑≤‰∏äÂÇ≥ÁöÑÂúñÁâá
export const loadUploadedImages = () => {
  try {
    const savedImages = localStorage.getItem(STORAGE_KEYS.UPLOADED_IMAGES);
    if (savedImages) {
      return JSON.parse(savedImages);
    }
    return [];
  } catch (error) {
    console.error('ËºâÂÖ•ÂúñÁâáÂ§±Êïó:', error);
    return [];
  }
};

// Ê∏ÖÈô§ÊâÄÊúâËçâÁ®ø
export const clearAllDrafts = () => {
  try {
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith(STORAGE_KEYS.DRAFT_PREFIX)) {
        keysToRemove.push(key);
      }
    }
    keysToRemove.forEach(key => localStorage.removeItem(key));
    return true;
  } catch (error) {
    console.error('Ê∏ÖÈô§ËçâÁ®øÂ§±Êïó:', error);
    return false;
  }
};

// Ê∏ÖÈô§ÊâÄÊúâÂúñÁâá
export const clearAllImages = () => {
  try {
    localStorage.removeItem(STORAGE_KEYS.UPLOADED_IMAGES);
    return true;
  } catch (error) {
    console.error('Ê∏ÖÈô§ÂúñÁâáÂ§±Êïó:', error);
    return false;
  }
};

// Ê™¢Êü• localStorage ‰ΩøÁî®ÊÉÖÊ≥Å
export const getStorageInfo = () => {
  try {
    let totalSize = 0;
    let draftSize = 0;
    let imageSize = 0;
    let imageLibrarySize = 0;

    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        const itemSize = (localStorage[key].length + key.length) * 2; // UTF-16 Á∑®Á¢ºÔºåÊØèÂ≠óÁ¨¶2Â≠óÁØÄ
        totalSize += itemSize;

        if (key.startsWith(STORAGE_KEYS.DRAFT_PREFIX)) {
          draftSize += itemSize;
        } else if (key === STORAGE_KEYS.UPLOADED_IMAGES) {
          imageSize += itemSize;
        } else if (key.startsWith(STORAGE_KEYS.IMAGE_LIBRARY)) {
          imageLibrarySize += itemSize;
        }
      }
    }

    return {
      total: (totalSize / 1024 / 1024).toFixed(2) + ' MB',
      drafts: (draftSize / 1024 / 1024).toFixed(2) + ' MB',
      images: (imageSize / 1024 / 1024).toFixed(2) + ' MB',
      imageLibrary: (imageLibrarySize / 1024 / 1024).toFixed(2) + ' MB',
      totalBytes: totalSize,
      draftBytes: draftSize,
      imageBytes: imageSize,
      imageLibraryBytes: imageLibrarySize,
    };
  } catch (error) {
    console.error('Áç≤ÂèñÂÑ≤Â≠ò‰ø°ÊÅØÂ§±Êïó:', error);
    return null;
  }
};
